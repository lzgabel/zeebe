name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch: { }

# Sequence deployment of artifacts on pushes to ensure ordering, e.g. SNAPSHOT is always the latest
# commit
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  tests:
    name: Tests
    uses: ./.github/workflows/test.yml
    secrets: inherit

  deploy-snapshots:
    name: Deploy snapshot artifacts
    needs: [ tests ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/zeebe'
    concurrency: deploy-snapshots
    steps:
      - uses: actions/checkout@v3
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_USR;
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_PSW;
      - uses: actions/setup-java@v3.5.1
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: camunda-nexus
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      # compile and generate-sources to ensure that the Javadoc can be properly generated; compile is
      # necessary when using annotation preprocessors for code generation, as otherwise the symbols are
      # not resolve-able by the Javadoc generator
      - run: mvn -B -D skipTests -D skipChecks compile generate-sources source:jar javadoc:jar deploy
        env:
          MAVEN_USERNAME: ${{ steps.secrets.outputs.ARTIFACTS_USR }}
          MAVEN_PASSWORD: ${{ steps.secrets.outputs.ARTIFACTS_PSW }}

  deploy-docker-snapshot:
    name: Deploy snapshot Docker image
    needs: [ tests ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/zeebe'
    steps:
      - uses: actions/checkout@v3
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_PSW;
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - uses: ./.github/actions/setup-zeebe
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
      - uses: ./.github/actions/build-docker
        id: build-docker
        with:
          repository: camunda/zeebe
          version: SNAPSHOT
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}

  notify-if-failed:
    name: Send slack notification on build failure
    runs-on: ubuntu-latest
    needs: [tests, deploy-snapshots, deploy-docker-snapshot]
    if: failure()
    steps:
      - id: slack-notify
        name: Send slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": ":alarm: Build on `main` failed! :alarm:\n${{ github.event.head_commit.url }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: Build on `main` failed! :alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the related commit: ${{ github.event.head_commit.url }}\n \\cc @zeebe-medic"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
